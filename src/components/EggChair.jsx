/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/scene.gltf 
Author: wright_101 (https://sketchfab.com/wright_101)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/egg-chair-4363b93c1ea74caa8768bbcea426bb81
Title: Egg-chair
*/

import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { useCustomization } from "../context/Customization";
import { useEffect, useRef } from "react";
import gsap from "gsap";

const EggChair = (props) => {
  const { material, chairColor } = useCustomization();
  const { nodes } = useGLTF("./models/scene.gltf");
  const chairRef = useRef();

  console.log("Loaded nodes:", nodes);

  useEffect(() => {
    console.log("Loaded nodes:", nodes);
  }, [nodes]);

  // LEATHER TEXTURE PROPS

  const leatherTextureProps = useTexture({
    // map: "./textures/leather/Leather_008_Base Color.jpg",
    normalMap: "./Eggtextures/leather/Leather_008_Normal.jpg",
    roughnessMap: "./Eggtextures/leather/Leather_008_Roughness.jpg",
    aoMap: "./Eggtextures/leather/Leather_008_Ambient Occlusion.jpg",
  });

  // leatherTextureProps.map.repeat.set(5, 5);
  leatherTextureProps.normalMap.repeat.set(5, 5);
  leatherTextureProps.roughnessMap.repeat.set(5, 5);
  leatherTextureProps.aoMap.repeat.set(5, 5);

  // leatherTextureProps.map.wrapS = leatherTextureProps.map.wrapT =
  //   THREE.RepeatWrapping;
  leatherTextureProps.normalMap.wrapS = leatherTextureProps.normalMap.wrapT =
    THREE.RepeatWrapping;
  leatherTextureProps.roughnessMap.wrapS =
    leatherTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
  leatherTextureProps.aoMap.wrapS = leatherTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;

  // FABRIC TEXTURE PROPS

  const fabricTextureProps = useTexture({
    // map: "./textures/fabric/Fabric_Knitted_006_basecolor.jpg",
    normalMap: "./Eggtextures/fabric/Fabric_Knitted_006_normal.jpg",
    roughnessMap: "./Eggtextures/fabric/Fabric_Knitted_006_roughness.jpg",
    aoMap: "./Eggtextures/fabric/Fabric_Knitted_006_ambientOcclusion.jpg",
  });

  // fabricTextureProps.map.repeat.set(10, 10);
  fabricTextureProps.normalMap.repeat.set(10, 10);
  fabricTextureProps.roughnessMap.repeat.set(10, 10);
  fabricTextureProps.aoMap.repeat.set(10, 10);

  // fabricTextureProps.map.wrapS = fabricTextureProps.map.wrapT =
  //   THREE.RepeatWrapping;
  fabricTextureProps.normalMap.wrapS = fabricTextureProps.normalMap.wrapT =
    THREE.RepeatWrapping;
  fabricTextureProps.roughnessMap.wrapS =
    fabricTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
  fabricTextureProps.aoMap.wrapS = fabricTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;

  // WOODEN TEXTURE PROPS

  const woodenTextureProps = useTexture({
    map: "./Eggtextures/wooden/Wood_Floor_012_basecolor.jpg",
    normalMap: "./Eggtextures/wooden/Wood_Floor_012_normal.jpg",
    roughnessMap: "./Eggtextures/wooden/Wood_Floor_012_roughness.jpg",
    aoMap: "./Eggtextures/wooden/Wood_Floor_012_ambientOcclusion.jpg",
  });

  woodenTextureProps.map.repeat.set(2, 2);
  woodenTextureProps.normalMap.repeat.set(2, 2);
  woodenTextureProps.roughnessMap.repeat.set(2, 2);
  woodenTextureProps.aoMap.repeat.set(2, 2);

  woodenTextureProps.map.wrapS = woodenTextureProps.map.wrapT =
    THREE.RepeatWrapping;
  woodenTextureProps.normalMap.wrapS = woodenTextureProps.normalMap.wrapT =
    THREE.RepeatWrapping;
  woodenTextureProps.roughnessMap.wrapS =
    woodenTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
  woodenTextureProps.aoMap.wrapS = woodenTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;

  useEffect(() => {
    if (chairRef.current) {
      gsap.to(chairRef.current.rotation, {
        z: chairRef.current.rotation.x + Math.PI * 2.5,
        duration: 5,
        ease: "power2.inOut",
      });
    }
  }, [chairColor.color]);

  return (
    <group {...props} dispose={null}>
      <group scale={0.01}>
        <mesh
          ref={chairRef}
          geometry={nodes["Object027_03_Egg-chair_0"].geometry}
          position={[-1.782, 68.23, -28.461]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={2.54}
        >
          <meshStandardMaterial
            color={chairColor.color}
            {...(material === "leather"
              ? leatherTextureProps
              : material === "fabric"
              ? fabricTextureProps
              : woodenTextureProps)}
          />
        </mesh>
      </group>
    </group>
  );
};

useGLTF.preload("./models/scene.gltf");

export default EggChair;
